let g:html_indent_tags = ''

" NERDTree
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Airline
  let g:airline_powerline_fonts = 1
  let g:airline_theme='base16_tomorrow'

" TagBar
  nmap <F8> :TagbarToggle<CR>

" go-vim
  let g:go_highlight_functions = 1
  let g:go_highlight_structs = 1

  let g:go_fmt_command = "goimports"

" Gundo
  nmap <F5> :GundoToggle<CR>

" FZF
  map <C-t> :Tags<cr>
  map <C-p> :Files<cr>
  nnoremap \] :Tags <c-r><c-w><CR>

  " Enable per-command history.
  " CTRL-N and CTRL-P will be automatically bound to next-history and
  " previous-history instead of down and up. If you don't like the change,
  " explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
  let g:fzf_history_dir = '~/.local/share/fzf-history'

  " Command for git grep
  " - fzf#vim#grep(command, with_column, [options], [fullscreen])
  command! -bang -nargs=* GGrep
    \ call fzf#vim#grep(
    \   'git grep --line-number '.shellescape(<q-args>), 0,
    \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

  " Likewise, Files command with preview window
  command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" Vroom Config
  let g:vroom_use_vimux = 1
  let g:vroom_use_bundle_exec = 0
  let g:vroom_cucumber_path = 'cucumber'

" Indent-Guides
  let g:indent_guides_auto_colors = 0
  hi IndentGuidesOdd  ctermbg=236
  hi IndentGuidesEven ctermbg=237

" Neo completion
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use deoplete.
  let g:deoplete#enable_at_startup = 1
  " Set minimum syntax keyword length.
  let g:deoplete#sources#syntax#min_keyword_length = 2

  let g:deoplete#enable_auto_select = 0

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

" Neo snippet
  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"

  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif

  " Tell Neosnippet about the other snippets
  let g:neosnippet#snippets_directory='~/.vim/snippets/'

" GitGutter
  set updatetime=100
  highlight GitGutterAdd    guifg=#009900 ctermfg=2
  highlight GitGutterChange guifg=#bbbb00 ctermfg=3
  highlight GitGutterDelete guifg=#ff2222 ctermfg=1

" Emmet
  let g:user_emmet_expandabbr_key = '<C-d>'
  let g:use_emmet_complete_tag = 1

" Go
  au FileType go nmap <leader>r <Plug>(go-run)
  au FileType go nmap <leader>b <Plug>(go-build)
  au FileType go nmap <leader>t :GoTest<cr>
  au FileType go nmap <leader>c <Plug>(go-coverage)

  au FileType go nmap <Leader>ds <Plug>(go-def-split)
  au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
  au FileType go nmap <Leader>dt <Plug>(go-def-tab)

" Rust (Cargo)
  au FileType rust nmap <leader>r :VimuxPromptCommand "cargo run"<cr><cr>
  au FileType rust nmap <leader>t :VimuxPromptCommand "cargo test"<cr><cr>
  au FileType rust nmap <leader>b :VimuxPromptCommand "cargo build"<cr><cr>

  let g:rustfmt_autosave = 1

" Vimux
  nmap <leader>o :VimuxPromptCommand<CR>

" Vim json
  set conceallevel=0

" JSX everywhere!
  let g:jsx_ext_required = 0

" Javascript
  let g:javascript_plugin_flow = 1

" Ale
  let g:ale_fix_on_save = 1
  let g:ale_lint_on_save = 1
  let g:ale_completion_enabled = 1
  let g:ale_close_preview_on_insert = 1

  au FileType * nmap <Leader>gd :ALEGoToDefinition<CR>
